function Butterworth_POXI(fh, Lowpass_Order, fl, Highpass_Order, T)
% Butterworth IIR filter design.
%
% fh             = Low pass cut-off frecuency
% Lowpass_Order  = Low pass filter order
% fl             = High pass cut-off frecuency
% Highpass_Order = Low pass filter order
% T              = Sample time

if nargin ~= 5
    error('We need five arguments !');
end

disp('Poxi filter design ...')
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
format long
F = 1/T;

[BH,AH]=butter(Highpass_Order,fl/(F/2),'high');
[BL,AL]=butter(Lowpass_Order,fh/(F/2),'low');

disp('Generating "..\poxi.sdk\poxi\src\dsp\DSP.H" ...')
file = fopen('..\poxi.sdk\poxi\src\dsp\DSP.H', 'w');
fprintf(file, '/*****************************************************************************/\n');
fprintf(file, '/**                                                                         **/\n');
fprintf(file, '/** DSP.H                                                                   **/\n');
fprintf(file, '/**                                                                         **/\n');
fprintf(file, '/** Butterworth IIR filter design.                                          **/\n');
fprintf(file, '/** This file was auto generated by a MATLAB script.                        **/\n');
fprintf(file, '/**                                                                         **/\n');
fprintf(file, '/** Created on: %s                                                 **/\n', date());
fprintf(file, '/**                                                                         **/\n');
fprintf(file, '/** Author: Yarib Nevárez                                                   **/\n');
fprintf(file, '/**         yarib_007@hotmail.com                                           **/\n');
fprintf(file, '/**                                                                         **/\n');
fprintf(file, '/*****************************************************************************/\n');
fprintf(file, '\n#ifndef DSP_H_');
fprintf(file, '\n#define DSP_H_');
fprintf(file, '\n/*****************************************************************************/\n');
fprintf(file, '#define DSP_SAMPLE_TIME           %.16f', T);
fprintf(file, '\n/*****************************************************************************/\n\n');
fprintf(file, '#define HIGH_PASS_CUTOFF_FREC_HZ  %.2f \n', fl);
fprintf(file, '#define HIGH_PASS_FILTER_ORDER    %d \n\n', Highpass_Order);

for x = 1:length(AH)
    fprintf(file, '#define F0_A%d  ((const double)%.16d)\n', x-1, AH(x));
end

fprintf(file, '\n');
for x = 1:length(BH)
    fprintf(file, '#define F0_B%d  ((const double)%.16d)\n', x-1, BH(x));
end

fprintf(file, '\nconst double A_high_pass [] = {');
for x = 1:(length(AH)-1)
    fprintf(file, 'F0_A%d, ', x-1);
end
fprintf(file, 'F0_A%d};',x);

fprintf(file, '\nconst double B_high_pass [] = {');
for x = 1:(length(BH)-1)
    fprintf(file, 'F0_B%d, ', x-1);
end
fprintf(file, 'F0_B%d};',x);

fprintf(file, '\nconst FilterParameters high_pass_filter_parameters = {HIGH_PASS_FILTER_ORDER, A_high_pass, B_high_pass};');
fprintf(file, '\n\n/*****************************************************************************/\n');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

fprintf(file, '\n');
fprintf(file, '#define LOW_PASS_CUTOFF_FREC_HZ   %.2f \n', fh);
fprintf(file, '#define LOW_PASS_FILTER_ORDER     %d \n\n', Lowpass_Order);
for x = 1:length(AL)
    fprintf(file, '#define F1_A%d   ((const double)%.16d)\n', x-1, AL(x));
end

fprintf(file, '\n');
for x = 1:length(BL)
    fprintf(file, '#define F1_B%d   ((const double)%.16d)\n', x-1, BL(x));
end

fprintf(file, '\nconst double A_low_pass [] = {');
for x = 1:(length(AL)-1)
    fprintf(file, 'F1_A%d, ', x-1);
end
fprintf(file, 'F1_A%d};',x);

fprintf(file, '\nconst double B_low_pass [] = {');
for x = 1:(length(BL)-1)
    fprintf(file, 'F1_B%d, ', x-1);
end
fprintf(file, 'F1_B%d};',x);

fprintf(file, '\nconst FilterParameters low_pass_filter_parameters = {LOW_PASS_FILTER_ORDER, A_low_pass, B_low_pass};');

fprintf(file, '\n\n/*****************************************************************************/\n');
fprintf(file, '\n#endif /* DSP_H_ */');
fclose(file);

disp('Done !')