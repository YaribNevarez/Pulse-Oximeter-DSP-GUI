package poxi;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.LayoutManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.Iterator;
import java.util.Locale;

import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.BevelBorder;
import javax.swing.border.EtchedBorder;

import info.monitorenter.gui.chart.Chart2D;
import info.monitorenter.gui.chart.ITracePoint2D;
import info.monitorenter.gui.chart.traces.Trace2DSimple;

import jssc.*;

public class poxi_gui {
	private JFrame frame;
	private JPanel chart_panel0;
	private JPanel chart_panel1;
	private JPanel chart_panel2;
	private JPanel chart_panel3;
	private JPanel chart_panel4;
    private Chart2D chart0;
    private Chart2D chart1;
    private Chart2D chart2;
    private Chart2D chart3;
    private Chart2D chart4;
    private Trace2DSimple trace_0;
    private Trace2DSimple trace_1;
    private Trace2DSimple trace_2;
    private Trace2DSimple trace_3;
    private Trace2DSimple trace_4;
    private JButton btnNewButton_1;
    
    private boolean plot_flag = false;

    private JButton btnConnect;
    private JButton btnDisconnect;
    private JButton btnSave;
    private String     portName;
    private SerialPort serialPort;
    
    private byte   serial_buffer[];
    private final byte serial_frameSignature = (byte) 0x5A;
    private int   serial_length;
    private byte   serial_crc;
    private int    serial_index;
    private boolean serial_frame_flag;
    
    private final int serial_DBSize = 16;
    private final int serial_CMDClearAll = 0;
    private final int serial_CMDBufferTrace = 1;
    private final int serial_CMDSetVisibleTrace = 2;
    private final int serial_CMDSetSTimeTrace = 3;
    private final int serial_CMDSetTimeTrace = 4;
    
    private double serial_STimeTrace0 = 1.0;
    private double serial_STimeTrace1 = 1.0;
    private double serial_STimeTrace2 = 1.0;
    private double serial_STimeTrace3 = 1.0;
    private double serial_STimeTrace4 = 1.0;

    private double serial_TimeTrace0 = 0.0;
    private double serial_TimeTrace1 = 0.0;
    private double serial_TimeTrace2 = 0.0;
    private double serial_TimeTrace3 = 0.0;
    private double serial_TimeTrace4 = 0.0;


    private double value = 0;


	/**
	 * Launch the application.
	 */
	public static void main(String[] args) 
	{
		EventQueue.invokeLater
		(
			new Runnable()
				{
					public void run()
					{
						try {
								poxi_gui window = new poxi_gui();
								window.frame.setVisible(true);
							}
							catch (Exception e)
							{
								e.printStackTrace();
							}
					}
				}
		);
	}

	/**
	 * Create the application.
	 */
	public poxi_gui()
	{
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize()
	{
		frame = new JFrame();
		frame.setBounds(400, 100, 800, 800);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout((LayoutManager) new BoxLayout(frame.getContentPane(), BoxLayout.PAGE_AXIS));
		
		chart_panel0 = new JPanel();
		chart_panel1 = new JPanel();
		chart_panel2 = new JPanel();
		chart_panel3 = new JPanel();
		chart_panel4 = new JPanel();
		
		chart_panel0.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		chart_panel1.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		chart_panel2.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		chart_panel3.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		chart_panel4.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		
		frame.getContentPane().add(chart_panel0);
		frame.getContentPane().add(chart_panel1);
		frame.getContentPane().add(chart_panel2);
		frame.getContentPane().add(chart_panel3);
		frame.getContentPane().add(chart_panel4);
		
		JPanel btn_panel = new JPanel();
		btn_panel.setBorder(new BevelBorder(BevelBorder.LOWERED, null, null, null, null));
		frame.getContentPane().add(btn_panel, BorderLayout.SOUTH);
		
		JButton btnNewButton = new JButton("Clear signal");
		btnNewButton.addActionListener
		(
			new ActionListener()
			{
				public void actionPerformed(ActionEvent arg0)
				{
					clearChart(0xff);
				}
			}
		);
		
		btn_panel.add(btnNewButton);
		
		btnNewButton_1 = new JButton("Sample signal");
		btnNewButton_1.addActionListener
		(
			new ActionListener()
			{
				public void actionPerformed(ActionEvent arg0)
				{
					System.out.println("Plot data");
					/////////////////////////////
					plot_flag = !plot_flag;
					
					if (plot_flag)
					{
						btnNewButton_1.setText("Stop sampling");
						btnNewButton_1.setForeground(Color.RED);
					}
					else
					{
						btnNewButton_1.setText("Start sampling");
						btnNewButton_1.setForeground(Color.BLUE);
					}
				}
			}
		);
		
		btn_panel.add(btnNewButton_1);
		
		//////////////////////////////////////
		
		String com_names [] = SerialPortList.getPortNames();
		
		for (int i = 0; i < com_names.length; i ++)
		{
			JButton btnCom = new JButton(com_names[i]);
			btnCom.addActionListener
			(
				new ActionListener()
				{
					public void actionPerformed(ActionEvent arg0)
					{
						System.out.println(arg0.getActionCommand().toString());
						portName=arg0.getActionCommand().toString();
						
						if (serialPort != null)
						{
							btnConnect.setEnabled(!serialPort.isOpened());
							btnDisconnect.setEnabled(serialPort.isOpened());
						}
						else
						{
							btnConnect.setEnabled(true);
						}
						
						btnConnect.setText("Connect " + portName);
					}
				}
			);
			
			btn_panel.add(btnCom);
		}
		
		//////////////////////////////////////
		btnConnect = new JButton("Connect");
		btnConnect.setEnabled(false);
		btnConnect.addActionListener
		(
			new ActionListener()
			{
				class PortReader implements SerialPortEventListener
				{
				    public void serialEvent(SerialPortEvent event) 
				    {
				    	System.out.println("Length: " + event.getEventValue());
				        if(event.isRXCHAR() && event.getEventValue() > 0)
				        {
				            try
				            {
				            	int data_index;
				            	byte data[] = serialPort.readBytes(event.getEventValue());
				            	
				            	data_index = 0;
				            	while (data_index < data.length)
				            	{
					            	if (serial_index == 0)
					            	{
					            		while ((data_index < data.length) && (data[data_index] != serial_frameSignature)) data_index ++;
					            		
					            		if ((data_index < data.length) && (data[data_index] == serial_frameSignature)) {serial_index ++; data_index ++;}
					            	}
					            	
					            	if ((serial_index == 1) && (data_index < data.length) )
				            		{
				            			serial_length = 0xFF&((int)data[data_index++]);
				            			serial_buffer = new byte[serial_length + 3];
				            			serial_buffer[0] = serial_frameSignature;
				            			serial_buffer[1] = (byte)(0xFF & serial_length); 
	
					            		serial_index = 2;
				            		}
					            	
					            	if (serial_index >= 2)
					            	{
						            	while (((serial_index - 2) < serial_length) && (data_index < data.length))
						            		serial_buffer[serial_index++] = data[data_index++];
						            	
						            	if (serial_index - 2 == serial_length)
						            	{
						            		if (data_index < data.length)
						            		{
						            			serial_crc = data[data_index];
						            			byte crc = 0;
						            			for (int i = 0; i < serial_length; i ++) crc += serial_buffer[i + 2];
						            			
						            			serialPort.writeByte((byte) (serial_crc + serial_length));
						            			serial_frame_flag = serial_crc == crc;
						            			serial_index = 0;
						            			serial_length = 0;
						            		}
						            	}
					            	}
					            	
					            	if (serial_frame_flag && (4 <= serial_buffer.length))
					            	{
					            		serial_frame_flag = false;
				            			switch (serial_buffer[2])
				            			{
				            			case serial_CMDClearAll:
				            				System.out.printf("SClear %d\n", serial_buffer[3]);
				            				clearChart(serial_buffer[3]);
				            				break;
				            			case serial_CMDBufferTrace:
				            				System.out.printf("SPlot %d\n", serial_buffer[3]);
				            				if (plot_flag)
				            				if (13 <= serial_buffer.length)
				            				{
				            					int k = 0;
							            		long data_long = 0;
							            		int array_length = serial_buffer[4];

							            		if (array_length <= serial_DBSize)
				            					while(k < array_length)
					            				{
						            				data_long = 0;
						            				for (int j = 0; j < 8; j++)
						            				{
						            					data_long |= (long)((0xFF&((long)serial_buffer[(5+j) + 8*k])) << (8*j));
						            				}
						            				value = Double.longBitsToDouble(data_long);
									                
								                	if (serial_buffer[3] == 0 || (0xFF&serial_buffer[3]) == 0xFF)
								                	{
									                	trace_0.addPoint(serial_TimeTrace0, value);
									                	serial_TimeTrace0+=serial_STimeTrace0;
								                	}
								                	if (serial_buffer[3] == 1 || (0xFF&serial_buffer[3]) == 0xFF)
								                	{
									                	trace_1.addPoint(serial_TimeTrace1, value);
									                	serial_TimeTrace1+=serial_STimeTrace1;
								                	}
									                k ++;
					            				}
				            				}
				            				break;
				            			case serial_CMDSetVisibleTrace:
				            				System.out.printf("SVisible %d = %d\n", serial_buffer[3], serial_buffer[4]);
				            				if (serial_buffer.length == 6)
				            				{
					            				if (serial_buffer[3] == 0 || (0xFF&serial_buffer[3]) == 0xFF) trace_0.setVisible(serial_buffer[4]>0);
					            				if (serial_buffer[3] == 1 || (0xFF&serial_buffer[3]) == 0xFF) trace_1.setVisible(serial_buffer[4]>0);
				            				}
				            				break;
				            			case serial_CMDSetSTimeTrace:
				            				System.out.printf("SSTime %d", serial_buffer[3]);
				            				if (serial_buffer.length == 13)
				            				{
					            				long data_long = 0;
					            				for (int j = 0; j < 8; j++)
					            				{
					            					data_long |= (long)((0xFF&((long)serial_buffer[4+j])) << (8*j));
					            				}
					            				value = Double.longBitsToDouble(data_long);
								                
					            				if (serial_buffer[3] == 0 || (0xFF&serial_buffer[3]) == 0xFF)
					            					serial_STimeTrace0 = value;
					            				if (serial_buffer[3] == 1 || (0xFF&serial_buffer[3]) == 0xFF)
					            					serial_STimeTrace1 = value;
					            				
					            				System.out.printf(" %f\n",value);
				            				}
				            				break;
				            			case serial_CMDSetTimeTrace:
				            				System.out.printf("STime %d", serial_buffer[3]);
				            				if (serial_buffer.length == 13)
				            				{
					            				long data_long = 0;
					            				for (int j = 0; j < 8; j++)
					            				{
					            					data_long |= (long)((0xFF&((long)serial_buffer[4+j])) << (8*j));
					            				}
					            				value = Double.longBitsToDouble(data_long);
								                
					            				if (serial_buffer[3] == 0 || (0xFF&serial_buffer[3]) == 0xFF)
					            					serial_TimeTrace0 = value;
					            				if (serial_buffer[3] == 1 || (0xFF&serial_buffer[3]) == 0xFF)
					            					serial_TimeTrace1 = value;
					            				
					            				System.out.printf(" %f\n",value);
				            				}
				            				break;
				            				default:
				            			}
					            	}
				            	}
				            }
				            catch (SerialPortException ex)
				            {
				                System.out.println("PortReader, Error: " + ex);
				            }
				        }
				    }
				}
				
				public void actionPerformed(ActionEvent arg0)
				{
					System.out.println("Connect " + portName);
					
					serialPort = new SerialPort(portName);
					
					try
					{
						serialPort.openPort();
						serialPort.setParams(SerialPort.BAUDRATE_115200,
											 SerialPort.DATABITS_8,
											 SerialPort.STOPBITS_1,
											 SerialPort.PARITY_NONE);
						serialPort.setFlowControlMode(SerialPort.FLOWCONTROL_RTSCTS_IN | SerialPort.FLOWCONTROL_RTSCTS_OUT);
						
						serialPort.addEventListener(new PortReader(), SerialPort.MASK_RXCHAR);
					}
					catch (SerialPortException ex)
					{
						System.out.println("Exception: " + ex.toString());
					}
					
					btnConnect.setEnabled(!serialPort.isOpened());
					btnDisconnect.setEnabled(serialPort.isOpened());
				}
			}
		);
		
		btn_panel.add(btnConnect);
		//////////////////////////////////////
		btnDisconnect = new JButton("Disconnect");
		btnDisconnect.setEnabled(false);
		btnDisconnect.addActionListener
		(
		new ActionListener()
		{
			public void actionPerformed(ActionEvent arg0)
			{
				System.out.println("Disconnect");
				try
				{
					serialPort.closePort();
				}
				catch (SerialPortException e)
				{
					e.printStackTrace();
				}
				
				btnConnect.setEnabled(!serialPort.isOpened());
				btnDisconnect.setEnabled(serialPort.isOpened());
			}
		}
		);
		
		btn_panel.add(btnDisconnect);
		//////////////////////////////////////
		btnSave = new JButton("Save to file");
		//btnSave.setEnabled(false);
		btnSave.addActionListener
		(
		new ActionListener()
		{
			public void actionPerformed(ActionEvent arg0)
			{
				System.out.println("Saving to file");
				
				btnSave.setEnabled(false);
				saveToFile();
				btnSave.setEnabled(true);
			}
		}
		);
		
		btn_panel.add(btnSave);
		//////////////////////////////////////
		CreateChart();
	}
	
	private void clearChart(int trace)
	{
		System.out.println("Clear");
		trace &= 0xFF;
		if (trace == 0 || trace == 0xFF)
		{
			trace_0.removeAllPoints();
			serial_TimeTrace0 = 0.0;
		}
		
		if (trace == 1 || trace == 0xFF)
		{
			trace_1.removeAllPoints();
			serial_TimeTrace1 = 0.0;
		}
		
		if (trace == 2 || trace == 0xFF)
		{
			trace_2.removeAllPoints();
			serial_TimeTrace2 = 0.0;
		}
		
		if (trace == 3 || trace == 0xFF)
		{
			trace_3.removeAllPoints();
			serial_TimeTrace3 = 0.0;
		}
		
		if (trace == 4 || trace == 0xFF)
		{
			trace_4.removeAllPoints();
			serial_TimeTrace4 = 0.0;
		}
	}


	private void CreateChart()
	{
		chart0 = new Chart2D();
		chart1 = new Chart2D();
		chart2 = new Chart2D();
		chart3 = new Chart2D();
		chart4 = new Chart2D();
		
        trace_0 = new Trace2DSimple();
        trace_1 = new Trace2DSimple();
        trace_2 = new Trace2DSimple();
        trace_3 = new Trace2DSimple();
        trace_4 = new Trace2DSimple();
        
        chart1.addTrace(trace_1);
        chart0.addTrace(trace_0);
        chart2.addTrace(trace_2);
        chart3.addTrace(trace_3);
        chart4.addTrace(trace_4);
        
        trace_0.setColor(Color.red);  trace_0.setName("Red");
        trace_1.setColor(Color.red);  trace_1.setName("Red Filtered");
        trace_2.setColor(Color.yellow);  trace_2.setName("Infrared Filtered");
        trace_3.setColor(Color.yellow);  trace_3.setName("Infrared Filtered");
        trace_4.setColor(Color.blue);  trace_4.setName("Oxigen saturation");
        
        chart_panel0.setLayout(new BorderLayout(0, 0));
        chart_panel1.setLayout(new BorderLayout(0, 0));
        chart_panel2.setLayout(new BorderLayout(0, 0));
        chart_panel3.setLayout(new BorderLayout(0, 0));
        chart_panel4.setLayout(new BorderLayout(0, 0));
        
        chart_panel0.add(chart0);
        chart_panel1.add(chart1);
        chart_panel2.add(chart2);
        chart_panel3.add(chart3);
        chart_panel4.add(chart4);

        chart0.setVisible(true);
        chart1.setVisible(true);
        chart2.setVisible(true);
        chart3.setVisible(true);
        chart4.setVisible(true);
        
        chart_panel0.setVisible(true);
        chart_panel1.setVisible(true);
        chart_panel2.setVisible(true);
        chart_panel3.setVisible(true);
        chart_panel4.setVisible(true);
        
        chart_panel0.repaint();
        chart_panel1.repaint();
        chart_panel2.repaint();
        chart_panel3.repaint();
        chart_panel4.repaint();

	}
	
	private void saveToFile()
	{
		Iterator<ITracePoint2D> itPoints;
		ITracePoint2D point;
		
		Path logFile = Paths.get("poxi_adc.dat");

        try (BufferedWriter writer = Files.newBufferedWriter(logFile,
                StandardCharsets.UTF_8, StandardOpenOption.CREATE))
        {
        	itPoints = trace_0.iterator();
        	
            while (itPoints.hasNext())
            {
            	point = itPoints.next();
                writer.write(String.format(Locale.US,"%.3f, %.16f\n", point.getX(), point.getY()));
            }
        } catch (Exception e)
        {
            e.printStackTrace();
        }
	}
	
}

