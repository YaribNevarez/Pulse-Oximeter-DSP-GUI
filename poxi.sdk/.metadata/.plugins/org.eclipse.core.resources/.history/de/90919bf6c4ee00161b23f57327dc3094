///******************************************************************************
//*
//* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
//*
//* Permission is hereby granted, free of charge, to any person obtaining a copy
//* of this software and associated documentation files (the "Software"), to deal
//* in the Software without restriction, including without limitation the rights
//* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//* copies of the Software, and to permit persons to whom the Software is
//* furnished to do so, subject to the following conditions:
//*
//* The above copyright notice and this permission notice shall be included in
//* all copies or substantial portions of the Software.
//*
//* Use of the Software is limited solely to applications:
//* (a) running on a Xilinx device, or
//* (b) that interact with a Xilinx device through a bus or interconnect.
//*
//* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
//* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
//* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
//* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//* SOFTWARE.
//*
//* Except as contained in this notice, the name of the Xilinx shall not be used
//* in advertising or otherwise to promote the sale, use or other dealings in
//* this Software without prior written authorization from Xilinx.
//*
//******************************************************************************/
//
///*
// * helloworld.c: simple test application
// *
// * This application configures UART 16550 to baud rate 9600.
// * PS7 UART (Zynq) is not initialized by this application, since
// * bootrom/bsp configures it to baud rate 115200
// *
// * ------------------------------------------------
// * | UART TYPE   BAUD RATE                        |
// * ------------------------------------------------
// *   uartns550   9600
// *   uartlite    Configurable only in HW design
// *   ps7_uart    115200 (configured by bootrom/bsp)
// */
//
//#include <stdio.h>
//#include "platform.h"
//#include "xil_printf.h"
//
//
//int main()
//{
//    init_platform();
//
//    print("Hello World\n\r");
//
//    cleanup_platform();
//    return 0;
//}

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xil_types.h"
#include "xparameters.h"
#include "xscugic.h"
#include "xil_exception.h"
#include "xscutimer.h"

#include "poxi_hardware.h"
#include "graphics.h"
#include "ui_components.h"
#include "dsp.h"
#include "miscellaneous.h"
#include "guicom.h"

// ---- interrupt controller -----
static XScuGic Intc;					// interrupt controller instance
static XScuGic_Config *IntcConfig;		// configuration instance

// ---- scu timer -----
static XScuTimer pTimer;				// private Timer instance
static XScuTimer_Config *pTimerConfig;	// configuration instance
#define TIMER_LOAD_VALUE  (3333333/40) // should be 1000 Hz (3333333 -> 100KHz)

/*
 * ------------------------------------------------------------
 * Interrupt handler (ZYNQ private timer)
 * ------------------------------------------------------------
 */

#define SAMPLES (6000)
#define SAMPLES_TO_PLOT (300)

static double red_buffer_filtered[2][SAMPLES];
static double red_buffer[2][SAMPLES];
static double ired_buffer_filtered[2][SAMPLES];
static double ired_buffer[2][SAMPLES];
static uint8_t buffSel = 0;
static uint8_t buffRedy = 0;

static double GUISamples[SAMPLES];

static uint32_t interrupt_cycles = 0;
static uint8_t interruptFlag = 0;

static ComposedFilter * cFilterRed = NULL;
static ComposedFilter * cFilterIred = NULL;
static Filter * oxyFilter = NULL;
double ADCOriginal;
double ADCFiltered;

static int i_state = 0;

static void TimerIntrHandler(void *CallBackRef) {
	XScuTimer *TimerInstance = (XScuTimer *) CallBackRef;

	XScuTimer_ClearInterruptStatus(TimerInstance);

	if (interruptFlag)
	switch (i_state)
	{
	case 0:
		LightProbe_instance()->light(LIGHTPROBE_RED);
		i_state = 1;
		break;
	case 1:
		ADCOriginal = AD7887_instance()->read_analog();
		ADCFiltered = cFilterRed->process(cFilterRed, ADCOriginal);

		red_buffer[buffSel][interrupt_cycles]          = ADCOriginal;
		red_buffer_filtered[buffSel][interrupt_cycles] = ADCFiltered;

		LightProbe_instance()->light(LIGHTPROBE_OFF);
		i_state = 2;
		break;
	case 2:
		LightProbe_instance()->light(LIGHTPROBE_INFRARED);
		i_state = 3;
		break;
	case 3:
		ADCOriginal = AD7887_instance()->read_analog();
		ADCFiltered = cFilterIred->process(cFilterIred, ADCOriginal);

		ired_buffer[buffSel][interrupt_cycles]          = ADCOriginal;
		ired_buffer_filtered[buffSel][interrupt_cycles] = ADCFiltered;

		LightProbe_instance()->light(LIGHTPROBE_OFF);

		interrupt_cycles ++;
		if (interrupt_cycles >= SAMPLES)
		{
			interrupt_cycles = 0;
			if (buffSel == 0) buffSel = 1;
			else buffSel = 0;
			buffRedy = 1;
		}
		i_state = 0;
		break;
	default:;
	}
}

void init_event_handlers(void) {
	Xil_ExceptionInit();

	IntcConfig = XScuGic_LookupConfig(XPAR_SCUGIC_0_DEVICE_ID);
	XScuGic_CfgInitialize(&Intc, IntcConfig, IntcConfig->CpuBaseAddress);

	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT,
			(Xil_ExceptionHandler) XScuGic_InterruptHandler, &Intc);

	pTimerConfig = XScuTimer_LookupConfig(XPAR_XSCUTIMER_0_DEVICE_ID);
	XScuTimer_CfgInitialize(&pTimer, pTimerConfig, pTimerConfig->BaseAddr);
	XScuTimer_EnableAutoReload(&pTimer);
	XScuTimer_LoadTimer(&pTimer, TIMER_LOAD_VALUE);

	XScuGic_Connect(&Intc, XPAR_SCUTIMER_INTR,
			(Xil_ExceptionHandler) TimerIntrHandler, (void *) &pTimer);
	XScuGic_Enable(&Intc, XPAR_SCUTIMER_INTR);
	XScuTimer_EnableInterrupt(&pTimer);

	Xil_ExceptionEnable();
}

void stop_event_handlers() {
	XScuTimer_Stop(&pTimer);
	Xil_ExceptionDisable();

	XScuTimer_DisableInterrupt(&pTimer);
	XScuGic_Disable(&Intc, XPAR_SCUTIMER_INTR);
}

static uint8_t stepSample = 50;


void poxi_test(void) {
	GUICom     * gui = GUICom_instance();
	AD5624R    * dac = AD5624R_instance();
	MCP6S2X    * pga = MCP6S2X_instance();
	AD7887     * adc = AD7887_instance();
	ZYBO       * zybo = ZYBO_instance();
	int16_t    enviant_light, red_light, ired_light, probe_detector, gain;
	int sel;

	FramePanel * frame = FramePanel_new(0, 0, MAX_WIDTH -1, MAX_HEIGHT -1, WHITE, BLACK);
	TextLabel * title = TextLabel_new(5, 20, 0, 0, "ESD - Pulse Oximeter", YELLOW, BLACK);

	TextLabel * labelA = TextLabel_new(20, 50, 0, 0, "A - RED", RED, BLACK);
	TextLabel * numA = TextLabel_new(100, 50, 0, 0, NULL, RED, BLACK);
	TextLabel * labelB = TextLabel_new(20, 60, 0, 0, "B - IRED", RED, BLACK);
	TextLabel * numB = TextLabel_new(100, 60, 0, 0, NULL, RED, BLACK);
	TextLabel * labelC = TextLabel_new(20, 70, 0, 0, "C - DETECTOR", RED, BLACK);
	TextLabel * numC = TextLabel_new(100, 70, 0, 0, NULL, RED, BLACK);
	TextLabel * labelD = TextLabel_new(20, 80, 0, 0, "D - ENVIANT", RED, BLACK);
	TextLabel * numD = TextLabel_new(100, 80, 0, 0, NULL, RED, BLACK);
	TextLabel * labelPGA = TextLabel_new(20, 100, 0, 0, "PGA", CYAN, BLACK);
	TextLabel * numPGA = TextLabel_new(100, 100, 0, 0, NULL, CYAN, BLACK);
	TextLabel * labelYR = TextLabel_new(20, 110, 0, 0, "ANALOG - RED", WHITE, BLACK);
	TextLabel * numYR = TextLabel_new(100, 110, 0, 0, NULL, WHITE, BLACK);
	TextLabel * labelYIR = TextLabel_new(20, 120, 0, 0, "ANALOG - IRED", WHITE, BLACK);
	TextLabel * numYIR = TextLabel_new(100, 120, 0, 0, NULL, WHITE, BLACK);

	TextLabel * labelStatus = TextLabel_new(20, 140, 0, 0, "Sampling", PINK, BLACK);

	Plot2D * graph = Plot2D_new(30, 150, 100, 150, RED, NAVY);

	frame->give_widget(frame, (Widget *)graph);
	frame->give_widget(frame, (Widget *)title);

	frame->give_widget(frame, (Widget *)labelA);
	frame->give_widget(frame, (Widget *)labelB);
	frame->give_widget(frame, (Widget *)labelC);
	frame->give_widget(frame, (Widget *)labelD);
	frame->give_widget(frame, (Widget *)labelPGA);
	frame->give_widget(frame, (Widget *)labelYR);
	frame->give_widget(frame, (Widget *)labelYIR);

	frame->give_widget(frame, (Widget *)numA);
	frame->give_widget(frame, (Widget *)numB);
	frame->give_widget(frame, (Widget *)numC);
	frame->give_widget(frame, (Widget *)numD);
	frame->give_widget(frame, (Widget *)numPGA);
	frame->give_widget(frame, (Widget *)numYR);
	frame->give_widget(frame, (Widget *)numYIR);

	frame->give_widget(frame, (Widget *)labelStatus);

	numA->set_label_type(numA, NUMBER);
	numB->set_label_type(numB, NUMBER);
	numC->set_label_type(numC, NUMBER);
	numD->set_label_type(numD, NUMBER);
	numPGA->set_label_type(numPGA, NUMBER);
	numYIR->set_label_type(numYIR, NUMBER);
	numYR->set_label_type(numYR, NUMBER);

	dac->reset();
	dac->LDAC_setup(0);
	dac->power_mode(NORMAL_OPERATION, 0xF);
	dac->internal_reference(REFERENCE_ON);

	adc->set_reference(REF_ENABLED);
	adc->set_channel_mode(SINGLE_CHANNEL);
	adc->set_power_mode(MODE2);

	frame->draw((Widget *)frame);

	pga->set_gain(GAIN_1);


		enviant_light = 0x8FF;
		dac->write_input_register(DAC_D, enviant_light);
		dac->update_DAC_register(DAC_D);
		numD->set_number(numD, enviant_light);

		red_light = 0xFFF;
		dac->write_input_register(DAC_A, red_light);
		dac->update_DAC_register(DAC_A);
		numA->set_number(numA, red_light);


		ired_light = 0xFFF;
		dac->write_input_register(DAC_B, ired_light);
		dac->update_DAC_register(DAC_B);
		numB->set_number(numB, ired_light);

		probe_detector = 0xFFF;
		dac->write_input_register(DAC_C, probe_detector);
		dac->update_DAC_register(DAC_C);
		numC->set_number(numC, probe_detector);

		gain = 7;
		pga->set_gain(gain);
		numPGA->set_number(numPGA, gain);

		gui->setStepTime(TRACE_ALL, 0.001*stepSample);
   do
   {

	   	numPGA->set_number(numPGA, cFilterRed->getStatistics(cFilterRed).fundamentalFrec * 60);
		if (buffRedy && zybo->switch_(0))
		{
			int i,k;
			buffRedy = 0;
			if (buffSel == 0) sel = 1;
			else sel = 0;

			labelStatus->set_text_color(labelStatus, WHITE);
			labelStatus->set_text(labelStatus,"Sending Data !!");

			gui->clearTrace(TRACE_ALL);

			for (k = i = 0; i < SAMPLES; i += stepSample, k ++)
				GUISamples[k]      = red_buffer[sel][i];
			gui->plotSamples(TRACE_0, GUISamples, k);

			for (k = i = 0; i < SAMPLES; i += stepSample, k ++)
				GUISamples[k] = red_buffer_filtered[sel][i];
			gui->plotSamples(TRACE_1, GUISamples, k);

			for (k = i = 0; i < SAMPLES; i += stepSample, k ++)
				GUISamples[k] = ired_buffer[sel][i];
			gui->plotSamples(TRACE_2, GUISamples, k);

			for (k = i = 0; i < SAMPLES; i += stepSample, k ++)
				GUISamples[k] = ired_buffer_filtered[sel][i];
			gui->plotSamples(TRACE_3, GUISamples, k);
/////////////////////////////////////////////////////
			for (k = i = 0; i < SAMPLES; i += stepSample, k ++)
				GUISamples[k] = red_buffer_filtered[sel][i];
			gui->plotSamples(TRACE_4, GUISamples, k);

			gui->setTime(TRACE_4, 0);
			for (k = i = 0; i < SAMPLES; i += stepSample, k ++)
				GUISamples[k] = ired_buffer[sel][i];
			gui->plotSamples(TRACE_4, GUISamples, k);
		}
		else
		{
			labelStatus->set_text_color(labelStatus, RED);
			labelStatus->set_text(labelStatus,"Waiting !!");
		}

	} while (zybo->switch_(3));

    labelStatus->set_text(labelStatus," * * * END * * *");
	frame->delete((Widget **) &frame);
}

int main() {
	TFTGraphics * graphics = TFTGraphics_instance();
	init_platform();
	init_event_handlers();
	XScuTimer_Start(&pTimer);


	graphics->initialize();
	graphics->speed(0xF0);
	graphics->drawLine(00, 00, ILI9341_WIDTH, ILI9341_HEIGHT, RED);
	graphics->speed(0xFE);

	///////////////////////////////////////////
	cFilterRed = ComposedFilter_new(2,
                                    Filter_new(&high_pass_filter_parameters),
                                    Filter_new(&low_pass_filter_parameters));

	cFilterRed->setSampleTime(cFilterRed, DSP_SAMPLE_TIME);
	cFilterRed->setupStatistics(cFilterRed, FUNDAMENTAL_FREC);
	///////////////////////////////////////////
	///////////////////////////////////////////
	cFilterIred = ComposedFilter_new(2,
                                     Filter_new(&high_pass_filter_parameters),
                                     Filter_new(&low_pass_filter_parameters));

	cFilterIred->setSampleTime(cFilterIred, DSP_SAMPLE_TIME);
	cFilterIred->setupStatistics(cFilterIred, FUNDAMENTAL_FREC);
	///////////////////////////////////////////
	oxyFilter = Filter_new(&low_pass_filter_parameters);
	///////////////////////////////////////////

	interruptFlag = 1;

	poxi_test();

	ZYBO_instance()->leds(0);

	interruptFlag = 0;
	cFilterRed->delete(&cFilterRed);
	cFilterIred->delete(&cFilterIred);
	LightProbe_instance()->light(LIGHTPROBE_OFF);

	stop_event_handlers();
	cleanup_platform();

	return 0;
}

