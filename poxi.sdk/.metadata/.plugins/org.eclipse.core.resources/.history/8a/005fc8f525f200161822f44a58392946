/*
 * GUICom.c
 *
 *  Created on: 3 de feb. de 2017
 *      Author: Yarib Nevárez
 */

#include "guicom.h"
#include "poxi_hardware.h"
#include "miscellaneous.h"
#include "string.h"

static void    GUICom_clearTrace (GUITrace trace);
static uint8_t GUICom_plotSamples(GUITrace trace, double * array, uint32_t length);
static void    GUICom_setVisible (GUITrace trace, uint8_t visible);
static void    GUICom_setTime    (GUITrace trace, double time);
static void    GUICom_setStepTime(GUITrace trace, double time);
static void    GUICom_textMsg    (uint8_t id, char * msg);

static GUIProgressCallBack progressCallBack = NULL;

static uint8_t GUICom_doubleBulkLength = 16;

#define CMD_CLEAR         0x00
#define CMD_PLOT          0x01
#define CMD_SET_VISIBLE   0x02
#define CMD_SET_STEP_TIME 0x03
#define CMD_SET_TIME      0x04
#define CMD_TEXT_MSG      0x05

static GUICom GUICom_obj = { GUICom_clearTrace,
                             GUICom_plotSamples,
                             GUICom_setVisible,
                             GUICom_setTime,
                             GUICom_setStepTime,
							 GUICom_textMsg};

GUICom * GUICom_instance(void)
{
	return & GUICom_obj;
}

static void    GUICom_clearTrace(GUITrace trace)
{
	uint8_t cmd[] = {CMD_CLEAR, 0};
	cmd[1] = trace;
	SerialPort_instance()->sendFrameCommand(cmd, sizeof(cmd), NULL, 0);
}

static uint8_t GUICom_plotSamples(GUITrace trace, double * array, uint32_t length)
{
	uint8_t rc;
	uint8_t  cmd[] = {CMD_PLOT, 0, 0};
	uint32_t i, len;

	cmd[1] = trace;

	rc = array != NULL;

	if (rc)
	{
		for (i = 0; i < length; i += len)
		{
			if(i + GUICom_doubleBulkLength < length)
			{
				len = GUICom_doubleBulkLength;
			}
			else
			{
				len = length - i;
			}
			cmd[2] = len;
			SerialPort_instance()->sendFrameCommand(cmd,
                                                    sizeof(cmd),
                                                    (uint8_t *) &array[i],
                                                    sizeof(double) * len);

			if (progressCallBack != NULL)
			{
				progressCallBack(i, length);
			}

			delay_ms(100);
		}
	}

	return rc;
}

static void    GUICom_setVisible (GUITrace trace, uint8_t visible)
{
	uint8_t cmd[] = {CMD_SET_VISIBLE, 0, 0};
	cmd[1] = trace;
	cmd[2] = visible;
	SerialPort_instance()->sendFrameCommand(cmd, sizeof(cmd), NULL, 0);
}

static void    GUICom_setTime    (GUITrace trace, double time)
{
	uint8_t cmd[] = {CMD_SET_TIME, 0};
	cmd[1] = trace;
	SerialPort_instance()->sendFrameCommand(cmd, sizeof(cmd), (uint8_t *)&time, sizeof(double));
}

static void    GUICom_setStepTime(GUITrace trace, double time)
{
	uint8_t cmd[] = {CMD_SET_STEP_TIME, 0};
	cmd[1] = trace;
	SerialPort_instance()->sendFrameCommand(cmd, sizeof(cmd), (uint8_t *)&time, sizeof(double));
}

static void    GUICom_textMsg    (uint8_t id, char * msg)
{
	uint8_t cmd[] = {CMD_TEXT_MSG, 0, 0};
	cmd[1] = id;
	cmd[2] = strlen(msg);
	SerialPort_instance()->sendFrameCommand(cmd, sizeof(cmd), (uint8_t *)msg, sizeof(char) * strlen(msg));
}
